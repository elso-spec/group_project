---
title: "Presentation"
author: "Elisabeth Solmunde"
format: html
editor: visual
---

```{r setup, results='hide', message=FALSE, warning=FALSE}
# Packages
library(tidyverse)
library(ggplot2)
library(dplyr)
library(countrycode)
library(stringr)
library(gt)
library(viridis)
library(plotly)
library(sf)
library(gghalves)
library(rnaturalearth)
library(ggridges)


# Data
tuesdata <- tidytuesdayR::tt_load('2023-12-05')
life_expectancy <- tuesdata$life_expectancy
life_expectancy_different_ages <- tuesdata$life_expectancy_different_ages
life_expectancy_female_male <- tuesdata$life_expectancy_female_male
```

# Group project

## 1. Description of our data

We chose to use the data set *life_expectancy*, which consists of three data sets:

-   *life_expectancy*
-   *life_expectancy_female_male*
-   *life_expectancy_different_ages*

In this presentation, we focus on the first two data sets.

### 1.1 The *life_expectancy* data set

This data set contains the following variables:

-   Entity
    -   Is most often a country, but can also be regions (*e.g.* Europe, Americas), income groups (*e.g.* High-income countries, or development status (*e.g.* Developed countries))
-   Code
    -   Represents a country code (*e.g.* Afghanistan = AFG)
-   Year
    -   Self-explanatory?
-   LifeExpectancy
    -   The life expectancy in a country in that given year

**Let's take a quick look:**

```{r}
head(life_expectancy)
```

### 1.2 The *life_expectancy_female_male* data set

This data set contains the same variables as the abovementioned, expect for one:

-   LifeExpectancyDiffFM
    -   This variable is the difference in life expectancy between females and males in that given year

```{r}
head(life_expectancy_female_male)
```

## 2. Wrangling

First, we limit the follow-up time from 1950 to 2020. For the *life_expectancy* data set, we also add the variable *Decade*

```{r, message=FALSE, warning=FALSE}
life_expectancy <- life_expectancy |>
  filter(Year >= 1950 & Year <= 2020)

life_expectancy_female_male <- life_expectancy_female_male |>
  filter(Year >= 1950 & Year <= 2020)


life_expectancy <- life_expectancy |>
  mutate(Decade = case_when(Year >= 1950 & Year < 1960 ~ 1950,        # Create Decade columns 
                            Year >= 1960 & Year < 1970 ~ 1960,
                            Year >= 1970 & Year < 1980 ~ 1970,
                            Year >= 1980 & Year < 1990 ~ 1980,
                            Year >= 1990 & Year < 2000 ~ 1990,
                            Year >= 2000 & Year < 2010 ~ 2000,
                            Year >= 2010 & Year < 2020 ~ 2010)) |>
  filter(!is.na(Decade))                                              # Remove NAs
```

We then create the data sets life_expectancy_countries and life_expectancy_regions

```{r}
# This dataset contain only countries
life_expectancy_countries <- life_expectancy |>
  filter(!(is.na(Code) == T))                         # We remove rows with no Code, as these are assigned to countries only

life_expectancy_countries
```

```{r, warning=FALSE}
# This dataset contain only regions
life_expectancy_region <- life_expectancy |>
  filter(!(is.na(Code) == T)) |>
  mutate(
    Continent = countrycode(sourcevar = Entity,
                            origin = "country.name",
                            destination = "continent"),
    Region = countrycode(sourcevar = Entity,
                         origin = "country.name",
                         destination = "region")
  ) |>
  filter(!is.na(Region))

life_expectancy_region
```

## 3. Visualization

**First, lets take a look at the changes in life expectancy over time:**

We'll start by looking at the continents, and then regions

```{r, message = FALSE, warning = FALSE}
life_expectancy_region |> 
  filter(!is.na(Continent)) |> 
  group_by(Continent, Decade) |> 
  summarise(mean_life_expectancy = mean(LifeExpectancy)) |> 
  ggplot(aes(x = Decade, y = mean_life_expectancy, color = Continent), na.rm = T) +
  geom_point() + 
  geom_smooth(se = F) + 
  scale_x_continuous(breaks = seq(1950, 2020, by = 10)) +
  theme_classic() +
  labs(
    x = "Year",
    y = "Mean life expectancy (years)",
    title = "Mean life expectancies from 1950 to 2020, by continent"
  )
```

```{r, message=FALSE, warning=FALSE}
life_expectancy_region |> 
  filter(!is.na(Region)) |> 
  group_by(Region, Decade) |> 
  summarise(mean_life_expectancy = mean(LifeExpectancy)) |> 
  ggplot(aes(x = Decade, y = mean_life_expectancy, color = Region), na.rm = T) +
  geom_point() + 
  geom_smooth(se = F) + 
  scale_x_continuous(breaks = seq(1950, 2020, by = 10)) +
  theme_classic() +
  labs(
    x = "Year",
    y = "Mean life expectancy (years)",
    title = "Mean life expectancies from 1950 to 2020, by region"
  )
```

```{r, message=FALSE, warning=FALSE}
# Life expectancy by region (1950-2020)
life_expectancy_region |> 
  group_by(Region, Year) |> 
  summarise(mean_le = mean(LifeExpectancy)) |> 
  ggplot(aes(x = Year, y = Region, fill = mean_le)) +
  geom_tile() +
  scale_fill_viridis_c(option = "plasma", name = "Life Expectancy") +
  labs(title = "Life Expectancy by Region (1960–2020)",
       x = "Year", y = "Region") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 6))
```

```{r, fig.height=20, fig.width=12, message=FALSE, warning=FALSE}
# Life expectancy by country (1950-2020)
ggplot(life_expectancy_region, aes(x = Year, y = Entity, fill = LifeExpectancy)) +
  geom_tile() + 
  facet_wrap( ~ Continent, scales = "free_y") +
  scale_fill_viridis_c(option = "plasma", name = "Life Expectancy") +
  labs(title = "Life Expectancy by Country (1960–2020)",
       x = "Year", y = "Country") +
  theme_minimal() +
  theme(axis.text.y = element_text(size = 6)) 
  
```

###The distribution of life expectancies within regions with comparison of the 1960s and the 2010s. 

## calculate average for the decade 1960 og 2010
First I calculate the average over decade by country
```{r}
life_expectancy_avg <- life_expectancy_region %>%
  filter(Decade %in% c(1960, 2010)) %>%
  group_by(Entity, Region, Decade) %>%
  summarise(LifeExpectancy = mean(LifeExpectancy), .groups = "drop")

```
Then i make a violin plot
```{r}
# Plot half violins
ggplot(life_expectancy_avg, aes(x = Region, y = LifeExpectancy, fill = factor(Decade))) +
  # Half violins
  geom_half_violin(data = subset(life_expectancy_avg, Decade == 1960), side = "l", alpha = 0.6) +
  geom_half_violin(data = subset(life_expectancy_avg, Decade == 2010), side = "r", alpha = 0.6) +
  
  # Punkter for hvert land
  #geom_point(aes(group = Entity), position = position_jitter(width = 0.1), size = 2, alpha = 0.7, color = "black") +
  #points could be added, but also overflows the visuals of the plot
  # Farver
  scale_fill_viridis_d(name = "Decade") + #inserting colorscheme
  
  # Tema og labels
  theme_minimal(base_size = 14) +
  labs(
    title = "Life Expectancy per Region: 1960 vs 2010", #lab titles
    x = "Region",
    y = "Life Expectancy"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) #axis text placement and angle
```

###The distribution over the world across decades
Firstly we join the data with population data and create a new data set
```{r}
dplyr::glimpse(countrypops)

# 1. Join life expectancy with countrypops
life_expectancy_pop <- life_expectancy_region %>%
  left_join(
    countrypops %>%
      rename(Code = country_code_3, Year = year, Population = population),
    by = c("Code", "Year")
  )
str(life_expectancy_pop)
```
Then I check for NAs
```{r}
na_list <- life_expectancy_pop %>%
  filter(is.na(Population)) %>%
  distinct(Code, Entity) %>%
  arrange(Code)

na_list
sum(is.na(life_expectancy_pop$Population))
```
Then I check the range of the Year column
```{r}
range(life_expectancy_region$Year)
range(countrypops$year)
```
I then filter the columns to match and check for NAs again
```{r}
life_expectancy_pop <- life_expectancy_region %>%
  filter(Year >= 1962) %>%
  left_join(
    countrypops %>%
      rename(Code = country_code_3, Year = year, Population = population),
    by = c("Code", "Year")
  )

sum(is.na(life_expectancy_pop$Population))

# Find alle Codes hvor Population er NA
na_list1 <- life_expectancy_pop %>%
  filter(is.na(Population)) %>%
  distinct(Code, Entity) %>%
  arrange(Code)

na_list1
```
I then remove the NAs
```{r}
life_expectancy_pop <- life_expectancy_pop %>%
  filter(!is.na(Population)) 

sum(is.na(life_expectancy_pop$Population))
```
Then I insert a new column with decade as a factor, since ggridges works with this.
```{r}
life_expectancy_pop <- life_expectancy_pop %>%
  mutate(DecadeF = factor(Decade))             # Decade as factor
```
I now make a ridgeplot
```{r}
# 5. Start med grundplot: ridge plot
p <- ggplot(life_expectancy_pop, aes(
  x = LifeExpectancy,
  y = DecadeF,
  fill = DecadeF
)) +
  ggridges::geom_density_ridges(scale = 2, alpha = 0.6, color = "white") +
  scale_fill_viridis_d(option = "D") +
  scale_x_continuous(name = "Life Expectancy") +
  scale_y_discrete(name = "Decade", limits = rev) +   # <--- vend rækkefølgen
  theme_minimal(base_size = 14) +
  theme(legend.position = "right") +
  labs(title = "Life Expectancy by Decade")
p
```

Now i decide to add a point with geom_point for the average by decade
```{r}
# Calculate non-weighted mean per decade
mean_per_decade <- life_expectancy_pop %>%
  group_by(DecadeF) %>%
  summarise(mean_LE = mean(LifeExpectancy))
            
p1<- p + geom_point(
  data = mean_per_decade,
  aes(x = mean_LE, y = DecadeF,color="Unweighted mean"))
p1
            
```
And a median
```{r}
# Calculate median per decade
median_per_decade <- life_expectancy_pop %>%
  group_by(DecadeF) %>%
  summarise(median_LE = median(LifeExpectancy, na.rm = TRUE))

p2<-p1+geom_line(
    data = median_per_decade,
    aes(x = median_LE, y = DecadeF, group = 1, color="Unweighted median"),
    size = 1,
    linetype = "dashed"
  )
p2
```
And the same where it is weighted by population
```{r}
weighted_means <- life_expectancy_pop %>%
  group_by(DecadeF) %>%
  summarise(
    wmean = sum(LifeExpectancy * Population) / sum(Population)
  )

library(matrixStats)

weighted_medians <- life_expectancy_pop %>%
  group_by(DecadeF) %>%
  summarise(
    median_w = matrixStats::weightedMedian(LifeExpectancy, Population, na.rm = TRUE),
    .groups = "drop"
  )

weighted_medians
 p3 <- p2 +
  geom_point(
    data = weighted_means,
    aes(x = wmean, y = DecadeF, color="Weighted mean")) 
p3

p4 <- p3 +
  geom_line(
    data = weighted_medians,
    aes(x = median_w, y=DecadeF, group=1,color="Weighted median"),
    linetype = "dashed",
    size = 1) 


p4
```
And we add a legend
```{r}
p5<-p4+
  scale_color_manual(
    name = "Statistics",
    values = c(
      "Unweighted mean" = "blue",
      "Unweighted median" = "blue",
      "Weighted mean"   = "red",
      "Weighted median" = "red"),
    guide = guide_legend(override.aes = list(shape = 16, size = 3)))
p5

```






